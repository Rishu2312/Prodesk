<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Step Progress Bar</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6c5ce7;
            --secondary-color: #a29bfe;
            --disabled-color: #dfe6e9;
            --success-color: #00b894;
            --error-color: #d63031;
            --warning-color: #fdcb6e;
            --text-color: #2d3436;
            --light-text: #636e72;
            --white: #ffffff;
            --shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            --transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: var(--text-color);
            line-height: 1.6;
            overflow: hidden;
            position: relative;
        }
        
        /* Animated Gradient Background */
        .bg-animation {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
        }
        
        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        .container {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: var(--shadow);
            padding: 2.5rem;
            width: 90%;
            max-width: 800px;
            text-align: center;
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.3);
            z-index: 1;
        }
        
        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 8px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        }
        
        h1 {
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            font-weight: 600;
            font-size: 2rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .progress-container {
            display: flex;
            justify-content: space-between;
            position: relative;
            margin: 2.5rem auto;
            max-width: 600px;
        }
        
        .progress-container::before {
            content: '';
            background-color: var(--disabled-color);
            position: absolute;
            top: 50%;
            left: 0;
            transform: translateY(-50%);
            height: 8px;
            width: 100%;
            z-index: 1;
            border-radius: 10px;
            opacity: 0.7;
        }
        
        .progress {
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            position: absolute;
            top: 50%;
            left: 0;
            transform: translateY(-50%);
            height: 8px;
            width: 0%;
            z-index: 2;
            border-radius: 10px;
            transition: var(--transition);
            box-shadow: 0 2px 8px rgba(108, 92, 231, 0.4);
        }
        
        .circle-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 80px;
        }
        
        .circle {
            background-color: var(--white);
            color: var(--light-text);
            border-radius: 50%;
            height: 50px;
            width: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 4px solid var(--disabled-color);
            transition: var(--transition);
            font-weight: 600;
            position: relative;
            z-index: 3;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .circle.active {
            border-color: var(--primary-color);
            color: var(--primary-color);
            transform: scale(1.1);
            box-shadow: 0 0 0 10px rgba(108, 92, 231, 0.2);
            animation: pulse 2s infinite;
        }
        
        .circle.completed {
            border-color: var(--success-color);
            background-color: var(--success-color);
            color: var(--white);
            box-shadow: 0 0 0 8px rgba(0, 184, 148, 0.2);
        }
        
        .step-label {
            margin-top: 12px;
            font-size: 0.9rem;
            color: var(--light-text);
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .step-label.active {
            color: var(--primary-color);
            font-weight: 600;
        }
        
        .step-label.completed {
            color: var(--success-color);
        }
        
        .btn-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 2rem;
        }
        
        .btn {
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            border-radius: 12px;
            cursor: pointer;
            padding: 14px 32px;
            font-size: 1rem;
            font-weight: 600;
            transition: var(--transition);
            box-shadow: 0 4px 12px rgba(108, 92, 231, 0.3);
            min-width: 140px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            position: relative;
            overflow: hidden;
        }
        
        .btn::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -60%;
            width: 200%;
            height: 200%;
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(30deg);
            transition: all 0.3s;
        }
        
        .btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(108, 92, 231, 0.4);
        }
        
        .btn:hover:not(:disabled)::after {
            left: 100%;
        }
        
        .btn:active:not(:disabled) {
            transform: translateY(1px);
        }
        
        .btn:disabled {
            background-color: var(--disabled-color);
            color: var(--light-text);
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }
        
        .btn-secondary {
            background-color: var(--white);
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            box-shadow: none;
        }
        
        .btn-secondary:hover:not(:disabled) {
            background-color: var(--primary-color);
            color: var(--white);
        }
        
        .btn-secondary:disabled {
            border-color: var(--disabled-color);
        }
        
        .icon {
            font-size: 1.2rem;
        }
        
        .completion-message {
            margin-top: 2rem;
            padding: 1.5rem;
            background: rgba(0, 184, 148, 0.1);
            border-radius: 12px;
            color: var(--success-color);
            font-weight: 600;
            display: none;
            animation: fadeIn 0.5s ease;
            border: 1px solid rgba(0, 184, 148, 0.2);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(108, 92, 231, 0.4); }
            70% { transform: scale(1.05); box-shadow: 0 0 0 15px rgba(108, 92, 231, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(108, 92, 231, 0); }
        }
        
        /* Floating bubbles decoration */
        .bubble {
            position: absolute;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            z-index: -1;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .container {
                padding: 1.5rem;
                width: 95%;
            }
            
            .circle {
                height: 40px;
                width: 40px;
                font-size: 0.9rem;
            }
            
            .step-label {
                font-size: 0.7rem;
            }
            
            .btn {
                padding: 12px 24px;
                min-width: 120px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="bg-animation"></div>
    
    <!-- Floating bubbles -->
    <div class="bubble" style="width: 100px; height: 100px; top: 20%; left: 10%;"></div>
    <div class="bubble" style="width: 150px; height: 150px; bottom: 15%; right: 5%;"></div>
    <div class="bubble" style="width: 70px; height: 70px; top: 60%; left: 20%;"></div>
    <div class="bubble" style="width: 120px; height: 120px; top: 30%; right: 15%;"></div>
    
    <div class="container">
        <h1>Step Progress Journey</h1>
        
        <div class="progress-container">
            <div class="progress" id="progress"></div>
            
            <div class="circle-container">
                <div class="circle active" data-step="1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                    </svg>
                </div>
                <div class="step-label active">Start</div>
            </div>
            
            <div class="circle-container">
                <div class="circle" data-step="2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                </div>
                <div class="step-label">Details</div>
            </div>
            
            <div class="circle-container">
                <div class="circle" data-step="3">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="22 12 16 12 14 15 10 15 8 12 2 12"></polyline>
                        <path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path>
                    </svg>
                </div>
                <div class="step-label">Review</div>
            </div>
            
            <div class="circle-container">
                <div class="circle" data-step="4">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="12" y1="1" x2="12" y2="23"></line>
                        <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
                    </svg>
                </div>
                <div class="step-label">Payment</div>
            </div>
            
            <div class="circle-container">
                <div class="circle" data-step="5">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                </div>
                <div class="step-label">Complete</div>
            </div>
        </div>
        
        <div class="completion-message" id="completionMessage">
            🎉 Congratulations! You've successfully completed your journey!
        </div>
        
        <div class="btn-container">
            <button class="btn btn-secondary" id="prev" disabled>
                <span class="icon">←</span> Previous
            </button>
            <button class="btn" id="next">
                Next <span class="icon">→</span>
            </button>
        </div>
    </div>

    <script>
        const progress = document.getElementById('progress');
        const prevBtn = document.getElementById('prev');
        const nextBtn = document.getElementById('next');
        const circles = document.querySelectorAll('.circle');
        const stepLabels = document.querySelectorAll('.step-label');
        const completionMessage = document.getElementById('completionMessage');
        
        let currentActive = 1;
        
        // Update the progress bar and buttons
        function update() {
            // Update circles
            circles.forEach((circle, idx) => {
                if (idx < currentActive - 1) {
                    circle.classList.add('completed');
                    circle.classList.remove('active');
                } else if (idx === currentActive - 1) {
                    circle.classList.add('active');
                    circle.classList.remove('completed');
                } else {
                    circle.classList.remove('active', 'completed');
                }
            });
            
            // Update step labels
            stepLabels.forEach((label, idx) => {
                if (idx < currentActive - 1) {
                    label.classList.add('completed');
                    label.classList.remove('active');
                } else if (idx === currentActive - 1) {
                    label.classList.add('active');
                    label.classList.remove('completed');
                } else {
                    label.classList.remove('active', 'completed');
                }
            });
            
            // Update progress bar width
            progress.style.width = ((currentActive - 1) / (circles.length - 1)) * 100 + '%';
            
            // Update buttons
            prevBtn.disabled = currentActive === 1;
            
            if (currentActive === circles.length) {
                nextBtn.disabled = true;
                completionMessage.style.display = 'block';
                createConfetti();
            } else {
                nextBtn.disabled = false;
                completionMessage.style.display = 'none';
            }
            
            // Change next button text on last step
            if (currentActive === circles.length - 1) {
                nextBtn.innerHTML = 'Finish <span class="icon">→</span>';
            } else if (currentActive === circles.length) {
                nextBtn.innerHTML = 'Complete!';
            } else {
                nextBtn.innerHTML = 'Next <span class="icon">→</span>';
            }
        }
        
        // Next button click handler
        nextBtn.addEventListener('click', () => {
            currentActive++;
            
            if (currentActive > circles.length) {
                currentActive = circles.length;
            }
            
            update();
        });
        
        // Previous button click handler
        prevBtn.addEventListener('click', () => {
            currentActive--;
            
            if (currentActive < 1) {
                currentActive = 1;
            }
            
            update();
        });
        
        // Allow clicking on circles to navigate
        circles.forEach((circle, idx) => {
            circle.addEventListener('click', () => {
                currentActive = idx + 1;
                update();
            });
        });
        
        // Create confetti effect
        function createConfetti() {
            const colors = ['#6c5ce7', '#00b894', '#fd79a8', '#fdcb6e', '#e17055', '#0984e3'];
            const container = document.querySelector('.container');
            
            for (let i = 0; i < 100; i++) {
                const confetti = document.createElement('div');
                confetti.classList.add('confetti');
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.top = -10 + 'px';
                confetti.style.width = Math.random() * 10 + 5 + 'px';
                confetti.style.height = Math.random() * 10 + 5 + 'px';
                confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
                confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '0';
                container.appendChild(confetti);
                
                // Animate confetti
                setTimeout(() => {
                    confetti.style.opacity = 1;
                    confetti.style.transform = `translate(${Math.random() * 200 - 100}px, ${Math.random() * 200 + 100}px) rotate(${Math.random() * 360}deg)`;
                    confetti.style.transition = `all ${Math.random() * 1 + 0.5}s ease-out`;
                    
                    // Remove confetti after animation
                    setTimeout(() => {
                        confetti.remove();
                    }, 1500);
                }, i * 20);
            }
        }
        
        // Create floating bubbles animation
        function animateBubbles() {
            const bubbles = document.querySelectorAll('.bubble');
            bubbles.forEach(bubble => {
                // Random movement
                const xMovement = Math.random() * 20 - 10;
                const yMovement = Math.random() * 20 - 10;
                const duration = Math.random() * 10 + 10;
                
                bubble.style.transition = `all ${duration}s linear`;
                bubble.style.transform = `translate(${xMovement}px, ${yMovement}px)`;
                
                // Continuous animation
                setInterval(() => {
                    const newX = Math.random() * 20 - 10;
                    const newY = Math.random() * 20 - 10;
                    bubble.style.transform = `translate(${newX}px, ${newY}px)`;
                }, duration * 1000);
            });
        }
        
        // Initialize
        update();
        animateBubbles();
    </script>
</body>
</html>
